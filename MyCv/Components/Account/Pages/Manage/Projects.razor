@page "/Account/Manage/Projects"
@inject HttpClient HttpClient
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<NavLink class="custom-link ms-0" href="/">Home</NavLink>
<NavLink class="custom-link" href="/Account/Manage">Manage Account</NavLink>

<h3>Projects</h3>

<EditForm Model="@newProject" OnValidSubmit="@HandleValidSubmit" FormName="ProjectForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label class="form-label">Choose Project:</label>
        <select class="form-control" value="@newProject" @onchange="OnProjectSelected">
            <option value="addNew"></option>
            @foreach(var project in projects)
            {
                <option value="@project.Id">@project.ProjectName</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="ProjectName">Project Name:</label>
        <InputText id="ProjectName" class="form-control" @bind-Value="newProject.ProjectName" />
    </div>

    <div class="form-group">
        <label for="Description">Description:</label>
        <InputTextArea id="Description" class="form-control" @bind-Value="newProject.Description" />
    </div>

    <div class="form-group">
        <label for="TechnologiesUsed">Technologies Used:</label>
        <InputText id="TechnologiesUsed" class="form-control" @bind-Value="newProject.TechnologiesUsed" />
    </div>

    <div class="form-group">
        <label for="ProjectLink">Project Link:</label>
        <InputText id="ProjectLink" class="form-control" @bind-Value="newProject.ProjectLink" />
    </div>

    <button type="submit" class="btn btn-success">Submit</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteProject">Delete</button>

</EditForm>

@code {

    public ProjectModel? newProject = new();
    private List<ProjectModel> projects = new();

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {

        projects = await HttpClient.GetFromJsonAsync<List<ProjectModel>>("/projects");

    }

    private async Task OnProjectSelected(ChangeEventArgs e)
    {
        var projectId = e.Value.ToString();
        if (string.IsNullOrEmpty(projectId))
        {
            newProject = new ProjectModel();
        }
        else
        {
            newProject = await HttpClient.GetFromJsonAsync<ProjectModel>($"projects/{projectId}");

        }
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;
        if (newProject.Id == Guid.Empty)
        {
            response = await HttpClient.PostAsJsonAsync("projects", newProject);
            
        }
        else
        {
            response = await HttpClient.PutAsJsonAsync($"projects/{newProject.Id}", newProject);
        }
            
        projects = await HttpClient.GetFromJsonAsync<List<ProjectModel>>("/projects");
        newProject = new ProjectModel();
        
    }

    private async Task DeleteProject()
    {
        if (newProject != null && newProject.Id != Guid.Empty)
        {
            var response = await HttpClient.DeleteAsync($"projects/{newProject.Id}");
            projects = await HttpClient.GetFromJsonAsync<List<ProjectModel>>("/projects");
            newProject = new ProjectModel();
            
        }
    }
}
