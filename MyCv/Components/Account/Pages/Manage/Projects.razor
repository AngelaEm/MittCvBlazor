@page "/Account/Manage/Projects"
@using Common.Models
@using Common.Interfaces
@inject IProjectService ProjectService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<NavLink class="custom-link ms-0" href="/">Home</NavLink>
<NavLink class="custom-link" href="/Account/Manage">Manage Account</NavLink>

<h3>Projects</h3>

<EditForm Model="@newProject" OnValidSubmit="@HandleValidSubmit" FormName="ProjectForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label class="form-label">Choose Project:</label>
        <select class="form-control" value="@newProject" @onchange="OnProjectSelected">
            <option value="addNew"></option>
            @foreach(var project in projects)
            {
                <option value="@project.Id">@project.ProjectName</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="ProjectName">Project Name:</label>
        <InputText id="ProjectName" class="form-control" @bind-Value="newProject.ProjectName" />
    </div>

    <div class="form-group">
        <label for="Description">Description:</label>
        <InputTextArea id="Description" class="form-control" @bind-Value="newProject.Description" />
    </div>

    <div class="form-group">
        <label for="TechnologiesUsed">Technologies Used:</label>
        <InputText id="TechnologiesUsed" class="form-control" @bind-Value="newProject.TechnologiesUsed" />
    </div>

    <div class="form-group">
        <label for="ProjectLink">Project Link:</label>
        <InputText id="ProjectLink" class="form-control" @bind-Value="newProject.ProjectLink" />
    </div>

    <button type="submit" class="btn btn-success">Submit</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteProject">Delete</button>

</EditForm>

@code {

    public ProjectModel? newProject = new();
    private List<ProjectModel> projects = new();

    protected override async Task OnInitializedAsync() 
    {

	    projects.AddRange(await ProjectService.GetAllAsync());
    }

    private async Task OnProjectSelected(ChangeEventArgs e)
    {
	    Guid.TryParse(e.Value?.ToString(), out Guid educationId);
    
	    if (educationId == Guid.Empty)
	    {
		    newProject = new ProjectModel();
	    }
	    else
	    {
		    
            newProject = await ProjectService.GetByIdAsync(educationId);
	    }
    }


    private async Task HandleValidSubmit()
    {
       
        if (newProject.Id == Guid.Empty)
	    {
		    await ProjectService.AddAsync(newProject);

	    }
	    else
	    {
		    await ProjectService.UpdateAsync(newProject);
            
	    }

        projects.Clear();
        projects.AddRange(await ProjectService.GetAllAsync());
        newProject = new ProjectModel();
    }

    

    private async Task DeleteProject()
    {
        if (newProject != null && newProject.Id != Guid.Empty)
	    {
            await ProjectService.DeleteAsync(newProject.Id);
            projects.Clear();
            projects.AddRange(await ProjectService.GetAllAsync());
            newProject = new ProjectModel();

	    }

    }
}
