@page "/Account/Manage/WorkExperience"
@using Common.Models
@using Common.Interfaces
@inject HttpClient HttpClient
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IWorkExperienceService WorkExperienceService


<NavLink class="custom-link ms-0" href="/">Home</NavLink>
<NavLink class="custom-link" href="/Account/Manage">Manage Account</NavLink>
<h3>WorkExperience</h3>

<EditForm Model="@newWorkExperience" OnValidSubmit="@HandleValidSubmit" FormName="EducationForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label class="form-label">Choose WorkExperience:</label>
        <select class="form-control" value="@newWorkExperience" @onchange="OnWorkExperienceSelected">
            <option value="addNew"></option>
            @foreach (var experience in workExperience)
            {
                <option value="@experience.Id">@experience.CompanyName</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="CompanyName">Company:</label>
        <InputText id="companyName" class="form-control" @bind-Value="newWorkExperience.CompanyName" />
    </div>
    <div class="form-group">
        <label for="Position">Position:</label>
        <InputText id="Position" class="form-control" @bind-Value="newWorkExperience.Position" />
    </div>
    <div class="form-group">
        <label for="StartDate">StartDate:</label>
        <InputDate id="startDate" class="form-control" @bind-Value="newWorkExperience.StartDate" />
    </div>
    <div class="form-group">
        <label for="EndDate">EndDate:</label>
        <InputDate id="endDate" class="form-control" @bind-Value="newWorkExperience.EndDate" />
    </div>
    <div class="form-group">
        <label for="Location">Location:</label>
        <InputText id="location" class="form-control" @bind-Value="newWorkExperience.Location" />
    </div>
    <div class="form-group">
        <label for="WorkDescription">Description:</label>
        <InputTextArea id="workDescription" class="form-control" @bind-Value="newWorkExperience.WorkDescription" />
    </div>

    <button type="submit" class="btn btn-success">Submit</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteWorkExperience">Delete</button>

</EditForm>

@code {
    private WorkExperienceModel newWorkExperience = new();
    private List<WorkExperienceModel> workExperience = new();

    protected override async Task OnInitializedAsync() 
    {

	    workExperience.AddRange(await WorkExperienceService.GetAllAsync());
    }

    private async Task OnWorkExperienceSelected(ChangeEventArgs e)
    {
	    Guid.TryParse(e.Value?.ToString(), out Guid workId);
    
	    if (workId == Guid.Empty)
	    {
		    newWorkExperience = new WorkExperienceModel();
	    }
	    else
	    {
		    
		    newWorkExperience = await WorkExperienceService.GetByIdAsync(workId);
	    }
    }


    private async Task HandleValidSubmit()
    {
       
	    if (newWorkExperience.Id == Guid.Empty)
	    {
		    await WorkExperienceService.AddAsync(newWorkExperience);

	    }
	    else
	    {
		    await WorkExperienceService.UpdateAsync(newWorkExperience);
            
	    }

	    workExperience.Clear();
        workExperience.AddRange(await WorkExperienceService.GetAllAsync());
	    newWorkExperience = new WorkExperienceModel();
    }

    

    private async Task DeleteWorkExperience()
    {
        if (newWorkExperience != null && newWorkExperience.Id != Guid.Empty)
	    {
            await WorkExperienceService.DeleteAsync(newWorkExperience.Id);
            workExperience.Clear();
            workExperience.AddRange(await WorkExperienceService.GetAllAsync());
            newWorkExperience = new WorkExperienceModel();

	    }

    }

}
