@page "/Account/Manage/Skills"
@using Common.Models
@using Common.Interfaces
@inject HttpClient HttpClient
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ISkillService SkillService


<NavLink class="custom-link ms-0" href="/">Home</NavLink>
<NavLink class="custom-link" href="/Account/Manage">Manage Account</NavLink>

<h3>Skills</h3>

<EditForm Model="@newSkill" OnValidSubmit="@HandleValidSubmit" FormName="ProjectForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label class="form-label">Choose Skill:</label>
        <select class="form-control" value="@newSkill" @onchange="OnSkillSelected">
            <option value="addNew"></option>
            @foreach (var skill in skills)
            {
                <option value="@skill.Id">@skill.TechnologyName</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="TechnologyName">Technology:</label>
        <InputText id="Technology" class="form-control" @bind-Value="newSkill.TechnologyName" />
    </div>

    <div class="form-group">
        <label for="YearsOfExperience">Years of experience:</label>
        <InputNumber id="YearsOfExperience" class="form-control" @bind-Value="newSkill.YearsOfExperience" />
    </div>

    <div class="form-group">
        <label for="SkillLevel">Skill Level:</label>
        <InputNumber id="SkillLevel" class="form-control" @bind-Value="newSkill.SkillLevel" />
    </div>

    <button type="submit" class="btn btn-success">Submit</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteSkill">Delete</button>

</EditForm>

@code {

    public SkillModel? newSkill = new();
    private List<SkillModel> skills = new();

    protected override async Task OnInitializedAsync() 
    {

	    skills.AddRange(await SkillService.GetAllAsync());
    }

    private async Task OnSkillSelected(ChangeEventArgs e)
    {
	    Guid.TryParse(e.Value?.ToString(), out Guid educationId);
    
	    if (educationId == Guid.Empty)
	    {
		    newSkill = new SkillModel();
	    }
	    else
	    {
		    
		    newSkill = await SkillService.GetByIdAsync(educationId);
	    }
    }


    private async Task HandleValidSubmit()
    {
       
	    if (newSkill.Id == Guid.Empty)
	    {
		    await SkillService.AddAsync(newSkill);

	    }
	    else
	    {
		    await SkillService.UpdateAsync(newSkill);
            
	    }

	    skills.Clear();
	    skills.AddRange(await SkillService.GetAllAsync());
	    newSkill = new SkillModel();
    }

    

    private async Task DeleteSkill()
    {
	    if (newSkill != null && newSkill.Id != Guid.Empty)
	    {
		    await SkillService.DeleteAsync(newSkill.Id);
		    skills.Clear();
		    skills.AddRange(await SkillService.GetAllAsync());
		    newSkill = new SkillModel();

	    }

    }
}
